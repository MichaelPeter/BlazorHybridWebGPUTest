@using Microsoft.JSInterop.Implementation
@using System.Diagnostics
@inject IJSRuntime JS
@inject Services.ISceneViewerCommunicationService SceneCommunication;
@implements IDisposable
@inject IJSUnsafeRuntime JSUnsafe;

<canvas class="render-canvas" @ref="_canvasRef">

</canvas>
<label>@_error</label>

@code {
    private ElementReference _canvasRef;

    private string? _error;

    [Parameter]
    public EventCallback<UsedEngineInfo> EngineStarted { get; set; }

    [Parameter]
    public long? SelectedMeshId { get; set; } = null;

    [Parameter]
    public EventCallback<long?> SelectedMeshIdChanged { get; set; }

    private IJSObjectReference? _renderEngine;

    private DotNetObjectReference<SceneCallback>? _thisReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // https://github.com/dotnet/aspnetcore/blob/a450cb69b5e4549f5515cdb057a68771f56cefd7/src/Components/WebAssembly/JSInterop/src/WebAssemblyJSRuntime.cs

                _thisReference = DotNetObjectReference.Create(new SceneCallback(this));

                _renderEngine = await JS.InvokeAsync<IJSObjectReference>("newRenderEngine", new object[] { _thisReference, _canvasRef });

                string typeName = _renderEngine.GetType().FullName!;
                UsedEngineInfo info = await _renderEngine.InvokeAsync<UsedEngineInfo>("initializeEngine");

                var eInProc = (JSInProcessObjectReference)_renderEngine;
                var sw = new Stopwatch();
                 

                sw.Start();
                for (int i = 0; i < 100000; i++)
                {
                    eInProc.InvokeVoid("PassMyself", new object[] { 12 /*_renderEngine*/ });
                }
                sw.Stop();
                await JS.InvokeVoidAsync("alert", new object[] { $"ExecTime: {sw.ElapsedMilliseconds}" });


                //JSUnsafe.InvokeUnmarshalledPassObject("passRenderEngine", _renderEngine);

                //getCurrentRenderEngine

                //IJSObjectReference resultRef = await _renderEngine.InvokeAsync<IJSObjectReference>("startEngine", new Object[] { _canvasRef });
                //StartEngineResult result = await _renderEngine.InvokeAsync<StartEngineResult>("startEngine", new Object[] { _canvasRef });

                // For some reason the return value in a promise could not be read from .net so a second method had to be defined
                await _renderEngine.InvokeVoidAsync("beginStartEngine", new object[] { });

                // Acutally engine is not yet started since beginStartEngine does not wait but the WebGPU bug forces this.
                await EngineStartedAsync(info);

                SceneCommunication.SetFPSProvider(async () =>
                {
                    return await _renderEngine.InvokeAsync<double?>("getFPS");
                });

                //StartEngineResult result = await _renderEngine.InvokeAsync<StartEngineResult>("getStartEngineResult");

                //await _renderEngine.InvokeVoidAsync("startEngine", new Object[] { _canvasRef });
                //await JsRuntime.InvokeVoidAsync("checkJsObj", new object[] { resultRef });

                //StartEngineResult result = new StartEngineResult();

                //StartEngineResult result = await JsRuntime.InvokeAsync<StartEngineResult>("BabylonRenderer.startEngineStatic", new Object[] { _canvasRef });
                //var result = await JsRuntime.InvokeAsync<IJSObjectReference >("BabylonRenderer.startEngineStatic", new Object[] { _canvasRef });
                //result
            }
            catch (Exception ex)
            {
                _error = ex.ToString();
            }
        }
    }

    public async Task MeshClicked(long meshId)
    {
        // After a object is clicked mark it as selected
        await _renderEngine!.InvokeVoidAsync("selectMesh", new object[] { meshId });

        SelectedMeshId = meshId;
        if (SelectedMeshIdChanged.HasDelegate)
            await SelectedMeshIdChanged.InvokeAsync(meshId);
    }

    internal async Task EngineStartedAsync(UsedEngineInfo usedEngineInfo)
    {
        //StateHasChanged();
        if (EngineStarted.HasDelegate)
        {
            await EngineStarted.InvokeAsync(usedEngineInfo);
        }
    }

    public void Dispose()
    {
        _thisReference?.Dispose();
    }
}


